import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';

export interface taskState {
  idCount: number;
  tasks: {
    id: number;
    title: string;
    completed: Boolean;
  }[];
  //どのタスクが選択されているかのstate
  selectedTask: {
    id: number;
    title: string;
    completed: Boolean;
  };
  //モーダルのstate
  isModelOpen: Boolean;
}

const initialState: taskState = {
  idCount: 0,
  tasks: [
    {
      id: 1,
      title: 'TaskA',
      completed: false,
    },
  ],
  selectedTask: {
    id: 0,
    title: '',
    completed: false,
  },
  isModelOpen: false,
};

// export const incrementAsync = createAsyncThunk();

export const taskSlice = createSlice({
  name: 'task',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    //CreateTask
    createTask: (state, action) => {
      state.idCount++;
      const newTask = {
        id: state.idCount,
        title: action.payload,
        completed: false,
      };
      state.tasks = [newTask, ...state.tasks];
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder;
  // },
});

export const { createTask } = taskSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTask = (state: RootState): taskState['tasks'] =>
  state.task.tasks;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default taskSlice.reducer;
